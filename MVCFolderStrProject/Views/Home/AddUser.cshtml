@model MVCFolderStrProjectLibrary.User

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" id="myForm">
        <h4>User</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="form-check">
                    @Html.RadioButtonFor(model => model.Gender, "Male", new { @class = "form-check-input", id = "GenderMale" })
                    <label for="GenderMale" class="form-check-label">Male</label>
                </div>
                <div class="form-check">
                    @Html.RadioButtonFor(model => model.Gender, "Female", new { @class = "form-check-input", id = "GenderFemale" })
                    <label for="GenderFemale" class="form-check-label">Female</label>
                </div>
                <div class="form-check">
                    @Html.RadioButtonFor(model => model.Gender, "Other", new { @class = "form-check-input", id = "GenderOther" })
                    <label for="GenderOther" class="form-check-label">Other</label>
                </div>
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(
model => model.CountryId,
ViewBag.CountryName1 != null ? new SelectList(ViewBag.CountryName1, "Value", "Text", Model.CountryId) : new SelectList(Enumerable.Empty<SelectListItem>()),
"Select a Country",
new { @class = "form-control", id = "CountryId", Model.CountryId }
)
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StateName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(
model => model.StateId,
ViewBag.StateName != null ? new SelectList(ViewBag.StateName, "Value", "Text") : new SelectList(Enumerable.Empty<SelectListItem>()),
"Select a State",
new { @class = "form-control", id = "StateId", Model.StateId }
)
                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CityName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(
model => model.CityId,
ViewBag.City != null ? new SelectList(ViewBag.City, "Value", "Text") : new SelectList(Enumerable.Empty<SelectListItem>()),
"Select a City",
new { @class = "form-control", id = "CityId" }
)
                @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">

            <div class="col-md-offset-2 col-md-3">
                @*<a href="~/Views/Home/AllData.cshtml" type="submit" value="Add New User" class="btn btn-primary bg-success add-user">Add New User</a>*@
                <input type="submit" value="Add New User" class="btn btn-default bg-success" />
               
            </div>
        </div>
    </div>


    <div>
        @Html.ActionLink("Back to List", "AllData")
    </div>

}
    @*<script>
        $(document).ready(function () {
            $('#myForm').on('submit', function (e) {
                e.preventDefault();
                Swal.fire({
                    title: 'Success!',
                    text: 'User Added Successfully!.',
                    icon: 'success',
                    confirmButtonText: 'Close'
                });
            }
        });
    </script>*@


    @*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")*@
    @*@Scripts.Render("~/Content/StateCityJSON.js")
    <script src="~/Content/StateCityJSON.js"></script>*@

    <script>

            $(document).ready(function () {

                $('#CountryId').change(function () {

                var countryId = $(this).val();
                if (countryId) {
                    $.ajax({
                        url: '@Url.Action("StateList", "Home")',
                        type: 'GET',
                        data: { CountryId: countryId },
                        success: function (data) {
                            var stateDropdown = $('#StateId');
                            stateDropdown.empty();
                            stateDropdown.append('<option value="">Select a State</option>');
                            $.each(data, function (index, item) {
                                stateDropdown.append('<option value="' + item.Value + '">' + item.Text + '</option>');
                            });
                        },
                        error: function () {
                            alert('Error loading states.');
                        }
                    });
                } else {
                    $('#StateId').empty().append('<option value="">Select a State</option>');
                }
            });
            });

            $(document).ready(function () {

            $('#StateId').change(function () {
                //debugger
                var StateId = $(this).val();
                if (StateId) {
                    $.ajax({
                        url: '@Url.Action("CityList", "Home")',
                        type: 'GET',
                        data: { StateId: StateId },
                        success: function (data) {
                            var cityDropdown = $('#CityId');
                            cityDropdown.empty();
                            cityDropdown.append('<option value="">Select a City</option>');
                            $.each(data, function (index, item) {
                                cityDropdown.append('<option value="' + item.Value + '">' + item.Text + '</option>');
                            });
                        },
                        error: function () {
                            alert('Error loading Cities.');
                        }
                    });
                } else {
                    $('#CityId').empty().append('<option value="">Select a City</option>');
                }
            });
    });
    </script>
    @*<script type="text/jscript">
            $('#partialView').load('/AddUser’);
        </script>*@

@*}*@